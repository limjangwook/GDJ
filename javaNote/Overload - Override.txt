* Overloading (메소드 오버로딩)
같은 이름의 메소드가 2개 이상 존재.(add가 3개인 것을 add메소드가 오버로딩 되어있다고 말한다)
매개변수의 개수나 타입이 다르면 같은 이름을 사용해서 메소드를 만들 수 있다.
 =>반드시 같은 메소드명을 가지면서 다른 매개변수(갯수or타입)를 가져야 한다.
즉, 매개변수의 갯수 또는 타입이 달라야 한다.
반환타입은 같아도, 달라도 된다.

 int add(int a, int b) {
	return a+b;		매개변수 2개
}
 int add(int a, int b, int c) {
	return a*b+c;			3개
}
 int add(int a, int b, int c, int d) {
	return a+b+c+d;			4개


 Calculator cal = new Calculator();
   system.out.println(cal.add(a, b));	// a+b 출력
   system.out.println(cal.add(a, b, c));	// a*b+c 출력
   system.out.println(cal.add(a, b, c, d));  // a+b+c+d 출력




* Overriding (메소드 오버라이딩)
슈퍼클래스의 메소드를 서브클래스에서 재정의하는 것. 메소드 덮어쓰기
슈퍼클래스의 메소드를 서브클래스가 사용하지 못하는 경우에 오버라이딩이 필요하다.
 =>반드시 슈퍼클래스의 메소드와 동일한 반환타입, 메소드명, 매개변수로 만들어야 한다.
오버라이드 된 메소드 앞에는 @oevrride 를 작성해서 오버라이딩 된 메소드임을 알린다.

public class 생크림케이크 {
    public void 재료() {
	system.out.println("플레인"); }
}


public class 딸기생크림케이크 extends 생크림케이크 {
   @Override
    public void 재료() {
	system.out.println("생딸기"); }
}

public class 망고생크림케이크 extends 생크림케이크 {
   @Override
    public void 재료() {
	system.out.println("애플망고"); }
}

public class 요거트생크림케이크 extends 생크림케이크 {
   @Override
    public void 재료() {
	system.out.println("요거트"); }
}

----> 슈퍼클래스 생크림케이크와 재료(메소드)가 다르기 때문에 
	재료()메소드를 새로 다시 만들어줘야 함! 



*업캐스팅에서의 오버라이드

부모 타입의 객체에 자식클래스의 필드를 담아주는 것
부모 타입의 객체에 자식 생성자를 호출
부모클래스 객체명 = new 자식생성자();
Snack mySnack = new Chicchock();
부모와 자식간의 공통 요소(오버라이드된 메소드)만 사용 가능하며
자식클래스에 추가된 것들은 사용 불가

업캐스팅된 서브클래스의 객체는 접근이 불가능해진다. 오직 슈퍼클래스에서만 가능